// auth.js
async function registerWithEmail(email, password) { await auth.createUserWithEmailAndPassword(email, password); window.location.href = 'index.html'; }
async function loginWithEmail(email, password) { await auth.signInWithEmailAndPassword(email, password); const urlParams = new URLSearchParams(window.location.search); const redirectUrl = urlParams.get('redirect'); window.location.href = redirectUrl || 'index.html'; }
async function signInWithGoogle() { await auth.signInWithPopup(googleProvider); const urlParams = new URLSearchParams(window.location.search); const redirectUrl = urlParams.get('redirect'); window.location.href = redirectUrl || 'index.html'; }
async function logoutUser() { await auth.signOut(); window.location.href = 'index.html'; }
async function getUserRole(userId) { if (!userId) return null; try { const userDoc = await db.collection('users').doc(userId).get(); return userDoc.exists ? userDoc.data().role : null; } catch (error) { console.error("Error getting user role:", error); return null; } }
function setupAuthUI(user) { const authContainer = document.getElementById('auth-container'); if (!authContainer) return; if (user) { getUserRole(user.uid).then(role => { let adminButton = (role === 'admin') ? `<a href="admin.html" class="text-gray-300 bg-green-600 px-3 py-2 rounded-md text-sm font-medium hover:bg-green-700">Admin</a>` : ''; authContainer.innerHTML = `<div class="flex items-center space-x-2"><span class="hidden sm:inline text-gray-300">Chào, ${user.displayName || user.email.split('@')[0]}</span><a href="profile.html" class="text-gray-300 bg-blue-600 px-3 py-2 rounded-md text-sm font-medium hover:bg-blue-700">Tài khoản</a>${adminButton}<button onclick="logoutUser()" class="text-white bg-red-600 px-3 py-2 rounded-md text-sm font-medium hover:bg-red-700">Đăng Xuất</button></div>`; }); } else { authContainer.innerHTML = `<a href="login.html" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Đăng Nhập</a><a href="login.html" class="text-white bg-orange-600 hover:bg-orange-700 px-3 py-2 rounded-md text-sm font-medium">Đăng Ký</a>`; } }
auth.onAuthStateChanged(user => { setupAuthUI(user); });
function getFriendlyAuthError(errorCode) { switch (errorCode) { case 'auth/user-not-found': return 'Email không tồn tại.'; case 'auth/wrong-password': return 'Sai mật khẩu. Vui lòng thử lại.'; case 'auth/email-already-in-use': return 'Email này đã được sử dụng.'; case 'auth/weak-password': return 'Mật khẩu phải có ít nhất 6 ký tự.'; case 'auth/invalid-credential': return 'Email hoặc mật khẩu không đúng.'; default: return 'Đã có lỗi xảy ra. Vui lòng thử lại.'; } }